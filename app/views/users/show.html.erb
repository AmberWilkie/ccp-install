<% content_for :title, @user.name %>

<p>Hello there <%= @user.name %></p>
<% flash.each do |key, value| %>
  <div class="alert alert-<%= key %>"><%= value %></div>
<% end %>

<%= form_for :message, :html => { :onsubmit => 'sendMessage();' }, remote: true do |f| %>
  Message : <%= f.text_area :text %><br/>
  <%= f.submit 'Send message' %>
<% end %>

<% @users.each do |user| %>
  <div id="<%= user[1] %>" name='user-select'>
    <%= user[0] %>
  </div>
<% end %>

<h1>Messages</h1>
<div id="message-container">
  <div id="messages">
    Messages loading...
  </div>
</div>

<script type="text/javascript" src="https://unpkg.com/@cometchat-pro/chat/CometChat.js"></script>

<script type="text/javascript">
    window.onload = (function () {
        // window scoped variable called `CometChat` is created.
    })
</script>

<script type="text/javascript" src="https://unpkg.com/@cometchat-pulse/cometchat-pulse.js/CometChat.js"></script>

<script type="text/javascript">
    const messageDiv = document.getElementById('messages')
    const appId = '<%= @app_id %>';
    const apiKey = '<%= @api_key %>';

    window.onload = (function () {
        CometChat.init(appId).then(
            hasInitialized => {
                const users = document.getElementsByName('user-select')
                users.forEach(u => u.addEventListener("click", e => {
                    fetchMessages(e.target.id);
                    setUser(e.target.id)
                }));

                loginUser()
            },
            error => {
                console.log("Initialization failed with error:", error);
                //Check the reason for error and take apppropriate action.
            }
        );

    });

    const setUser = id => {
        const previousDivs = Array.from(document.getElementsByClassName('selected-user'))
        previousDivs.forEach(div => div.className = div.className.replace(/\bselected-user\b/,''))
        const userDiv = document.getElementById(id)
        userDiv.className += 'selected-user'
    }

    const fetchMessages = id => {
        const limit = 30;
        const messagesRequest = new CometChat.MessagesRequestBuilder().setUID(id).setLimit(limit).build();

        messagesRequest.fetchPrevious().then(
            messages => {
                console.log("Message list fetched: ", messages);
                messageDiv.innerHTML = messages.map(msg => `<div>${msg.text}</div>`).join('')
            },
            error => {
                console.log("Message fetching failed with error:", error);
            }
        );
    }

    const loginUser = () => {
        CometChat.login(<%= @user.id %>, apiKey).then(
            User => {
                fetchMessages(<%= @users.first[1] %>);
                addMessageListener()
            },
            error => {
                console.log("Login failed with exception:", {error});
                // User login failed, check error and take appropriate action.
            }
        )
    }

    const addMessageListener = () => {
        CometChat.addMessageListener(
            'listener_id',
            new CometChat.MessageListener({
                onTextMessageReceived: textMessage => displayNewMessage(textMessage),
                onMediaMessageReceived: mediaMessage => {
                    console.log("Media message received successfully", mediaMessage);
                }
            })
        );
    }

    const displayNewMessage = message => {
        const newNode = document.createElement("div")
        newNode.innerHTML = message.text
        messageDiv.appendChild(newNode)
    }

    const sendMessage = () => {
        const recipient_id = document.getElementsByClassName('selected-user')[0].id;
        console.log(recipient_id)
        const message_text = document.getElementsByName('message[text]')[0].value;

        const messageType = CometChat.MESSAGE_TYPE.TEXT;
        const receiverType = CometChat.RECEIVER_TYPE.USER;
        const textMessage = new CometChat.TextMessage(recipient_id, message_text, messageType, receiverType);

        CometChat.sendMessage(textMessage).then(
            message => displayNewMessage(message),
            error => {
                console.log("Message sending failed with error:", error);
            }
        );
    }
</script>
